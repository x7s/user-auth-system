import express from 'express';
import passport from 'passport';
import { verifyEmail } from '../controllers/authController.js';

const router = express.Router();

// üßë‚Äçüíª –†–µ–Ω–¥–∏—Ä–∞–Ω–µ –Ω–∞ login —Ñ–æ—Ä–º–∞ (–ø–æ-–∫—ä—Å–Ω–æ —â–µ –¥–æ–±–∞–≤–∏–º EJS –∏–ª–∏ frontend)
router.get('/login', (req, res) => {
  res.send('<h2>Login Page</h2><p>–©–µ –¥–æ–±–∞–≤–∏–º EJS –ø–æ-–∫—ä—Å–Ω–æ.</p>');
});

// üßë‚Äçüíº –†–µ–Ω–¥–∏—Ä–∞–Ω–µ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞ —Ñ–æ—Ä–º–∞
router.get('/register', (req, res) => {
  res.send('<h2>Register Page</h2><p>–©–µ –¥–æ–±–∞–≤–∏–º EJS –ø–æ-–∫—ä—Å–Ω–æ.</p>');
});

// üìù POST —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
// ‚ö†Ô∏è –ê–ª—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞ –ª–æ–≥–∏–∫–∞, —Ä–∞–∑–ª–∏—á–Ω–∞ –æ—Ç —Ç–∞–∑–∏ –≤ –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä–∞
// –ú–æ–∂–µ –¥–∞ —è –∑–∞–º–µ–Ω–∏—à —Å: import { registerUser } from '../controllers/authController.js'
// –∏ router.post('/register', registerUser)
router.post('/register', async (req, res) => {
  const { name, email, password } = req.body;
  try {
    let user = await User.findOne({ email });
    if (user) return res.status(400).send('–ò–º–µ–π–ª—ä—Ç –≤–µ—á–µ –µ –∑–∞–µ—Ç.');

    const hashedPassword = await bcrypt.hash(password, 10);
    user = await User.create({
      name,
      email,
      password: hashedPassword,
      role: 'user',
    });

    res.redirect('/auth/login');
  } catch (err) {
    console.error(err);
    res.status(500).send('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è.');
  }
});

// üîê POST –≤—Ö–æ–¥
router.post(
  '/login',
  passport.authenticate('local', {
    successRedirect: '/dashboard',
    failureRedirect: '/auth/login',
  })
);

// üö™ –ò–∑—Ö–æ–¥ –æ—Ç —Å–∏—Å—Ç–µ–º–∞—Ç–∞
router.get('/logout', (req, res, next) => {
  req.logout(err => {
    if (err) return next(err);
    res.redirect('/auth/login');
  });
});

// üåê Google OAuth –≤—Ö–æ–¥
router.get('/google', passport.authenticate('google', { scope: ['profile', 'email'] }));

// ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ Google callback
router.get(
  '/google/callback',
  passport.authenticate('google', {
    failureRedirect: '/auth/login',
    successRedirect: '/dashboard',
  })
);

// üìß –ü–æ—Ç–≤—ä—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ –∏–º–µ–π–ª (–ª–∏–Ω–∫ –æ—Ç email)
router.get('/verify-email', verifyEmail);

export default router;
/* * auth.js
 * –æ—Ä–∏–≥–∏–Ω–∞–ª–µ–Ω –∫–æ–¥ –Ω–∞ –†—É—Ç–µ—Ä–∞ –∑–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –∞–≤—Ç–µ–Ω—Ç–∏–∫–∞—Ü–∏—è –∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—Å–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è
  * –¢–æ–∑–∏ —Ñ–∞–π–ª —Å—ä–¥—ä—Ä–∂–∞ —Ä—É—Ç–æ–≤–µ –∑–∞ –≤—Ö–æ–¥, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è, –ø–æ—Ç–≤—ä—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ email –∏ –¥—Ä—É–≥–∏ –¥–µ–π—Å—Ç–≤–∏—è
  */
/*
import express from 'express'
import passport from 'passport'
import bcrypt from 'bcrypt'
import User from '../models/User.js'
import { verifyEmail } from '../controllers/authController.js'
import { updateProfile, changeEmail, changePassword, sendEmailVerification, deleteAccount } from '../controllers/authController.js'
import { ensureAuthenticated } from '../middlewares/auth.js'
import { logRouteAccess } from '../middlewares/loggerMiddleware.js'

const router = express.Router()

// –†–µ–Ω–¥–∏—Ä–∞–Ω–µ –Ω–∞ login —Ñ–æ—Ä–º–∞ (–ø–æ-–∫—ä—Å–Ω–æ —â–µ –¥–æ–±–∞–≤–∏–º EJS)
router.get('/login', (req, res) => {
  res.send('<h2>Login Page</h2><p>–©–µ –¥–æ–±–∞–≤–∏–º EJS –ø–æ-–∫—ä—Å–Ω–æ.</p>')
})

// –†–µ–Ω–¥–∏—Ä–∞–Ω–µ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞ —Ñ–æ—Ä–º–∞
router.get('/register', (req, res) => {
  res.send('<h2>Register Page</h2><p>–©–µ –¥–æ–±–∞–≤–∏–º EJS –ø–æ-–∫—ä—Å–Ω–æ.</p>')
})

// POST —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
router.post('/register', async (req, res) => {
  const { name, email, password } = req.body
  try {
    let user = await User.findOne({ email })
    if (user) return res.status(400).send('–ò–º–µ–π–ª—ä—Ç –≤–µ—á–µ –µ –∑–∞–µ—Ç.')

    const hashedPassword = await bcrypt.hash(password, 10)

    user = await User.create({
      name,
      email,
      password: hashedPassword,
      role: 'user',
    })

    res.redirect('/auth/login')
  } catch (err) {
    console.error(err)
    res.status(500).send('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è.')
  }
})

// POST –≤—Ö–æ–¥ —Å –ª–æ–∫–∞–ª–µ–Ω –∞–∫–∞—É–Ω—Ç
router.post('/login',
  passport.authenticate('local', {
    successRedirect: '/dashboard',
    failureRedirect: '/auth/login',
  })
)

// GET logout
router.get('/logout', (req, res, next) => {
  req.logout(err => {
    if (err) return next(err)
    res.redirect('/auth/login')
  })
})

// GET Google –≤—Ö–æ–¥
router.get('/google',
  passport.authenticate('google', { scope: ['profile', 'email'] })
)

// Google callback
router.get('/google/callback',
  passport.authenticate('google', {
    failureRedirect: '/auth/login',
    successRedirect: '/dashboard'
  })
)

router.get('/admin-panel', ensureAuthenticated, authorizeRoles('admin'), logRouteAccess('admin_panel_access'), (req, res) => {
  // ...
})

// –†—É—Ç –∑–∞ –ø–æ—Ç–≤—ä—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ email
router.get('/verify-email', verifyEmail)
router.delete('/account/delete', ensureAuthenticated, deleteAccount)
router.put('/account/profile', ensureAuthenticated, updateProfile)
router.put('/account/email', ensureAuthenticated, changeEmail)
router.put('/account/password', ensureAuthenticated, changePassword)
router.post('/send-verification-email', ensureAuthenticated, sendEmailVerification)

export default router
*/