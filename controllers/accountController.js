// üß© –ò–º–ø–æ—Ä—Ç–∏ –Ω–∞ –≤—Å–∏—á–∫–∏ –Ω—É–∂–Ω–∏ –º–æ–¥—É–ª–∏
import User from '../models/User.js';
import bcrypt from 'bcryptjs';
import crypto from 'crypto';
import VerificationToken from '../models/VerificationToken.js';
import { sendVerificationEmail } from '../utils/sendVerificationEmail.js';
import { logProfileUpdate, logAccountDeletion } from '../utils/logger.js';
import sendNotification from '../utils/sendNotification.js';
import { createNotification } from '../utils/notifications.js';

// üë§ –ü—Ä–µ–≥–ª–µ–¥ –Ω–∞ —Ç–µ–∫—É—â–∏—è –ø—Ä–æ—Ñ–∏–ª (GET /account/settings)
export const getAccountSettings = async (req, res) => {
  try {
    const user = await User.findById(req.user._id).select('-password');
    if (!user) return res.status(404).json({ error: '–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è—Ç –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω' });
    res.json(user);
  } catch (error) {
    res.status(500).json({ error: '–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª' });
  }
};

// ‚úèÔ∏è –û–±–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ –∏–º–µ –∏ email (–≤—ä—Ç—Ä–µ—à–Ω–∞ –ª–æ–≥–∏–∫–∞, —Ä–∞–∑–ª–∏—á–Ω–∞ –æ—Ç updateProfile)
export const updateAccountInfo = async (req, res) => {
  try {
    const { name, email } = req.body;
    const user = await User.findById(req.user._id);
    if (!user) return res.status(404).json({ error: '–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è—Ç –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω' });

    if (email && email !== user.email) {
      const emailExists = await User.findOne({ email });
      if (emailExists) {
        return res.status(400).json({ error: 'Email –≤–µ—á–µ —Å–µ –∏–∑–ø–æ–ª–∑–≤–∞' });
      }
      user.email = email;
      user.emailVerified = false;
    }

    if (name) user.name = name;

    await user.save();
    res.json({ message: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è—Ç–∞ –µ –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ' });
  } catch (error) {
    res.status(500).json({ error: '–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è—Ç–∞' });
  }
};

// üîí –°–º—è–Ω–∞ –Ω–∞ –ø–∞—Ä–æ–ª–∞
export const changePassword = async (req, res) => {
  try {
    const { currentPassword, newPassword } = req.body;
    if (!currentPassword || !newPassword) {
      return res.status(400).json({ error: '–í—Å–∏—á–∫–∏ –ø–æ–ª–µ—Ç–∞ —Å–∞ –∑–∞–¥—ä–ª–∂–∏—Ç–µ–ª–Ω–∏' });
    }

    const user = await User.findById(req.user._id);
    if (!user) return res.status(404).json({ error: '–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è—Ç –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω' });

    const isMatch = await bcrypt.compare(currentPassword, user.password);
    if (!isMatch) {
      return res.status(400).json({ error: '–¢–µ–∫—É—â–∞—Ç–∞ –ø–∞—Ä–æ–ª–∞ –µ –≥—Ä–µ—à–Ω–∞' });
    }

    const salt = await bcrypt.genSalt(10);
    user.password = await bcrypt.hash(newPassword, salt);
    await user.save();

    await sendNotification(user._id, '–ü–∞—Ä–æ–ª–∞—Ç–∞ –≤–∏ –±–µ—à–µ –ø—Ä–æ–º–µ–Ω–µ–Ω–∞.', 'success');
    await createNotification(user._id, '–ü–∞—Ä–æ–ª–∞—Ç–∞ –±–µ—à–µ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–º–µ–Ω–µ–Ω–∞.');

    res.json({ message: '–ü–∞—Ä–æ–ª–∞—Ç–∞ –µ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–º–µ–Ω–µ–Ω–∞' });
  } catch (error) {
    res.status(500).json({ error: '–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Å–º—è–Ω–∞ –Ω–∞ –ø–∞—Ä–æ–ª–∞' });
  }
};

// üë§ –ü—ä–ª–Ω–æ –æ–±–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª (–∏–º–µ, –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—Å–∫–æ –∏–º–µ, email)
export const updateProfile = async (req, res) => {
  try {
    const userId = req.user._id;
    const { name, username, email } = req.body;

    const user = await User.findById(userId);
    if (!user) return res.status(404).json({ error: '–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è—Ç –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω' });

    if (username && username !== user.username) {
      const existingUser = await User.findOne({ username, _id: { $ne: userId } });
      if (existingUser) return res.status(400).json({ error: '–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—Å–∫–æ—Ç–æ –∏–º–µ –µ –∑–∞–µ—Ç–æ' });
      user.username = username;
    }

    let changes = '';
    if (name && name !== user.name) {
      changes += `–ò–º–µ: ${user.name} ‚Üí ${name}; `;
      user.name = name;
    }

    if (email && email !== user.email) {
      changes += `–ò–º–µ–π–ª: ${user.email} ‚Üí ${email}; `;
      user.email = email;
      user.emailVerified = false;
    }

    await user.save();
    await logProfileUpdate(user, changes, req.ip);
    await sendNotification(user._id, '–ü—Ä–æ—Ñ–∏–ª—ä—Ç –±–µ—à–µ –æ–±–Ω–æ–≤–µ–Ω —É—Å–ø–µ—à–Ω–æ.', 'info');

    res.json({ message: '–ü—Ä–æ—Ñ–∏–ª—ä—Ç –µ –æ–±–Ω–æ–≤–µ–Ω —É—Å–ø–µ—à–Ω–æ' });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: '–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª–∞' });
  }
};

// üìß –°–º—è–Ω–∞ –Ω–∞ –∏–º–µ–π–ª
export const changeEmail = async (req, res) => {
  try {
    const userId = req.user._id;
    const { newEmail } = req.body;

    const existingUser = await User.findOne({ email: newEmail, _id: { $ne: userId } });
    if (existingUser) return res.status(400).json({ error: '–ò–º–µ–π–ª—ä—Ç –≤–µ—á–µ –µ –∑–∞–µ—Ç' });

    const user = await User.findById(userId);
    if (!user) return res.status(404).json({ error: '–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è—Ç –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω' });

    user.email = newEmail;
    user.emailVerified = false;
    await user.save();

    await sendVerificationEmail(user);

    res.json({ message: '–ò–º–µ–π–ª—ä—Ç –µ –ø—Ä–æ–º–µ–Ω–µ–Ω. –ú–æ–ª—è, –ø–æ—Ç–≤—ä—Ä–¥–µ—Ç–µ –Ω–æ–≤–∏—è –∏–º–µ–π–ª.' });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: '–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Å–º—è–Ω–∞ –Ω–∞ –∏–º–µ–π–ª–∞' });
  }
};

// üì® –ò–∑–ø—Ä–∞—â–∞–Ω–µ –Ω–∞ –Ω–æ–≤ email –∑–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è
export const sendEmailVerification = async (req, res) => {
  try {
    const user = req.user;

    await sendVerificationEmail(user);

    res.json({ message: '–ò–º–µ–π–ª—ä—Ç –∑–∞ –ø–æ—Ç–≤—ä—Ä–∂–¥–µ–Ω–∏–µ –±–µ—à–µ –∏–∑–ø—Ä–∞—Ç–µ–Ω —É—Å–ø–µ—à–Ω–æ.' });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: '–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑–ø—Ä–∞—â–∞–Ω–µ –Ω–∞ –∏–º–µ–π–ª–∞.' });
  }
};

// ‚ùå –ò–∑—Ç—Ä–∏–≤–∞–Ω–µ –Ω–∞ –∞–∫–∞—É–Ω—Ç
export const deleteAccount = async (req, res) => {
  try {
    const user = req.user;

    await User.findByIdAndDelete(user._id);
    await logAccountDeletion(user, req.ip);
    await sendNotification(user._id, '–í–∞—à–∏—è—Ç –∞–∫–∞—É–Ω—Ç –±–µ—à–µ –∏–∑—Ç—Ä–∏—Ç.', 'danger');

    req.logout(() => {
      req.session.destroy();
      res.json({ message: '–ê–∫–∞—É–Ω—Ç—ä—Ç –µ –∏–∑—Ç—Ä–∏—Ç —É—Å–ø–µ—à–Ω–æ.' });
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: '–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ –Ω–∞ –∞–∫–∞—É–Ω—Ç–∞.' });
  }
};


/* * AccountController.js
 * –æ—Ä–∏–≥–∏–Ω–∞–ª–µ–Ω –∫–æ–¥ –Ω–∞ –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä–∞ –∑–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—Å–∫–∏ –∞–∫–∞—É–Ω—Ç –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  * 
  * 
  */
 /*
import User from '../models/User.js'
import bcrypt from 'bcryptjs'

// –ü—Ä–µ–≥–ª–µ–¥ –Ω–∞ —Ç–µ–∫—É—â –ø—Ä–æ—Ñ–∏–ª (–≤–µ—á–µ –∏–º–∞–º–µ –≤ userController, –Ω–æ –º–æ–∂–µ –¥–∞ –¥—É–±–ª–∏—Ä–∞–º–µ –∏–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–∞–º–µ)
export const getAccountSettings = async (req, res) => {
  try {
    const user = await User.findById(req.user._id).select('-password')
    if (!user) return res.status(404).json({ error: '–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è—Ç –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω' })
    res.json(user)
  } catch (error) {
    res.status(500).json({ error: '–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª' })
  }
}

// –ê–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞–Ω–µ –Ω–∞ –∏–º–µ –∏ email
export const updateAccountInfo = async (req, res) => {
  try {
    const { name, email } = req.body
    const user = await User.findById(req.user._id)
    if (!user) return res.status(404).json({ error: '–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è—Ç –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω' })

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ –ø—Ä–æ–º—è–Ω–∞ –Ω–∞ email –∏ –¥–∞–ª–∏ –Ω–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞ –≤–µ—á–µ
    if (email && email !== user.email) {
      const emailExists = await User.findOne({ email })
      if (emailExists) {
        return res.status(400).json({ error: 'Email –≤–µ—á–µ —Å–µ –∏–∑–ø–æ–ª–∑–≤–∞' })
      }
      user.email = email
    }
    if (name) user.name = name

    await user.save()
    res.json({ message: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è—Ç–∞ –µ –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ' })
  } catch (error) {
    res.status(500).json({ error: '–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è—Ç–∞' })
  }
}

// –°–º—è–Ω–∞ –Ω–∞ –ø–∞—Ä–æ–ª–∞
export const changePassword = async (req, res) => {
  try {
    const { currentPassword, newPassword } = req.body
    if (!currentPassword || !newPassword) {
      return res.status(400).json({ error: '–í—Å–∏—á–∫–∏ –ø–æ–ª–µ—Ç–∞ —Å–∞ –∑–∞–¥—ä–ª–∂–∏—Ç–µ–ª–Ω–∏' })
    }

    const user = await User.findById(req.user._id)
    if (!user) return res.status(404).json({ error: '–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è—Ç –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω' })

    const isMatch = await bcrypt.compare(currentPassword, user.password)
    if (!isMatch) {
      return res.status(400).json({ error: '–¢–µ–∫—É—â–∞—Ç–∞ –ø–∞—Ä–æ–ª–∞ –µ –≥—Ä–µ—à–Ω–∞' })
    }

    // –•–µ—à–∏—Ä–∞–Ω–µ –Ω–∞ –Ω–æ–≤–∞—Ç–∞ –ø–∞—Ä–æ–ª–∞
    const salt = await bcrypt.genSalt(10)
    user.password = await bcrypt.hash(newPassword, salt)
    await user.save()

    res.json({ message: '–ü–∞—Ä–æ–ª–∞—Ç–∞ –µ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–º–µ–Ω–µ–Ω–∞' })
  } catch (error) {
    res.status(500).json({ error: '–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Å–º—è–Ω–∞ –Ω–∞ –ø–∞—Ä–æ–ª–∞' })
  }
}
*/