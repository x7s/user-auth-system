import express from 'express'
import { listUsers, updateRole } from '../controllers/userController.js'
import { isAuthenticated, isAdmin, authorizeRoles, ensureRoles } from '../middlewares/auth.js'
import Log from '../models/Log.js'
import { logRouteAccess } from '../middlewares/loggerMiddleware.js';
import { Parser as Json2csvParser } from 'json2csv';

const router = express.Router()

router.get('/', isAuthenticated, isAdmin, logRouteAccess('–î–æ—Å—Ç—ä–ø –¥–æ –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª'), (req, res) => {
  res.render('admin', {
    title: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–∏ –ø–∞–Ω–µ–ª',
    user: req.user
  });
});

// üîê –°–∞–º–æ –∑–∞ –∞–¥–º–∏–Ω –∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä
router.get('/users', isAuthenticated, ensureRoles(['admin', 'moderator']), logRouteAccess('–ü—Ä–µ–≥–ª–µ–¥ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—Å–∫–∏ —Å–ø–∏—Å—ä–∫'), listUsers);

// –ü—Ä–æ–º—è–Ω–∞ –Ω–∞ —Ä–æ–ª—è –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª (—Ñ–æ—Ä–º–∞—Ç–∞ —â–µ –ø–æ–¥–∞–≤–∞ userId –∏ –Ω–æ–≤–∞ —Ä–æ–ª—è)
router.post('/users/update-role', isAuthenticated, isAdmin, logRouteAccess('–ü—Ä–æ–º—è–Ω–∞ –Ω–∞ —Ä–æ–ª—è –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª'), updateRole)

// –°–∞–º–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∏ –∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∏ –º–æ–≥–∞—Ç –¥–∞ –≤–∏–∂–¥–∞—Ç –ª–æ–≥–æ–≤–µ—Ç–µ
router.get('/logs', isAuthenticated, authorizeRoles('admin', 'moderator'), logRouteAccess('–ù–µ–æ—Ç–æ—Ä–∏–∑–∏—Ä–∞–Ω –¥–æ—Å—Ç—ä–ø –¥–æ –ª–æ–≥–æ–≤–µ'), async (req, res) => {
  try {
    const logs = await Log.find().populate('user', 'email name').sort({ createdAt: -1 }).limit(100)
    res.json(logs)
  } catch (error) {
    res.status(500).json({ error: '–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –ª–æ–≥–æ–≤–µ—Ç–µ.' })
  }
})

// Middleware —Å–∞–º–æ –∑–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∏
router.use(isAuthenticated);
router.use(ensureRoles('Admin'));

// GET /admin/logs/export?format=json|csv
router.get('/logs/export', logRouteAccess('–ï–∫—Å–ø–æ—Ä—Ç –Ω–∞ –ª–æ–≥–æ–≤–µ'), async (req, res) => {
  try {
    const format = req.query.format === 'csv' ? 'csv' : 'json';
    const logs = await Log.find().sort({ timestamp: -1 });

    if (format === 'json') {
      res.setHeader('Content-Disposition', 'attachment; filename=logs.json');
      res.json(logs);
    } else {
      // CSV –µ–∫—Å–ø–æ—Ä—Ç
      const fields = ['userId', 'action', 'timestamp', 'details'];
      const json2csvParser = new Json2csvParser({ fields });
      const csv = json2csvParser.parse(logs.map(log => ({
        userId: log.user.toString(),
        action: log.action,
        timestamp: log.timestamp.toISOString(),
        details: log.details || ''
      })));

      res.setHeader('Content-Disposition', 'attachment; filename=logs.csv');
      res.header('Content-Type', 'text/csv');
      res.send(csv);
    }
  } catch (error) {
    console.error('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –µ–∫—Å–ø–æ—Ä—Ç –Ω–∞ –ª–æ–≥–æ–≤–µ:', error);
    res.status(500).send('–í—ä–∑–Ω–∏–∫–Ω–∞ –≥—Ä–µ—à–∫–∞ –ø—Ä–∏ –µ–∫—Å–ø–æ—Ä—Ç–∞.');
  }
});

export default router